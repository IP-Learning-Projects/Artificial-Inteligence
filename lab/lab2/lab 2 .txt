recursivitate si liste in prolog

predicat (  []  ) ---- %lease case
predicat([x|T}):-   predicat(T)


ancestor(A,B):- parent(A,B).
ancestor(A,B):- parent(A,X),
		ancestor(X,B).

?-ancestor(david,john)
yes<- ancestor(david, john)

teta={A/david,B/john}
yes<- true
stop



?- fact(4,R)
R=24

fact(0,1).
fact(N,F):- N>0, N1 is N-1, fact(N1,F1), F is N * F1.


fact adica factorial 

in prolog in windows 
se foloseste trace.
enter
intram in modul trace
apoi scriem 

pe cel online se pune trace,<<ceva>>
aka trace,fact(4,X).


trace.
Call:fact(4, _4560)
 Call:4>0
 Exit:4>0
 Call:_4836 is 4+-1
 Exit:3 is 4+-1
 Call:fact(3, _4838)
 Call:3>0
X = 24
false




LISTE


[1,2,3] lista de 1,2,3
[H|T] lista cu head si tail 


[1|[2,3]]
[1|[2|3]]

parse([])
parse([H|T]):- write(H),parse(t).

_ means don't care- anonymus variable 

like [_|T]
[H|nil] - ultimul element al listei



%parsing a list
parse([]).
parse([H|T]) :-
    write(H),
    parse(T).


%check if is a list
is_list([]).
is_list([_|T]) :- is_list(T).

%append a list to another list
append1([],L,L). 
append1([H|T],L2,[H|L3])  :-  append1(T,L2,L3).

Reversing a list
Course 4 exeample
% naive rec reverse list
naive_rev([],[]).
naive_rev([H|T], R) :- naive_rev(T, S), append(S, [H], R).

% accumulator rec reverese list
rev(L, R) :- rev(L, [], R).
rev([], R, R).
rev([H|T], C, R) :- rev(T, [H|C], R).

naive_reverse foloseste append ce reitereaza prin lista de fiecare data O(n^2)
rev foloseste un acumulator O(n)
trace,rev([1,2,3],X).


gen append(l1,l2,rl)
rl=[1,2,3,4,5]


curs 4 AI
m=member

m(2,[1,2,3]).
m(X,[X|T]):- m(X,T).


//concatenarea din curs - aia cu const
concat([],L,L)
concat([X|T],U,[X|V]):-concat(T,U,V).



prefix([1,2,3],[1,2,3,4]).
true


trace.
prefix([],_).
prefix([X|T1],[X|T2]):- prefix(T1,T2). ---- ffs iar sterge tabla


trace,prefix([1,2,3],[1,2,3,4]).






ex 2 
apelare trace,callFunction(1,[4,2,1]).

prefix([],_).
prefix([X|T1],[X|T2]):- prefix(T1,T2).

rev(L, R) :- rev(L, [], R).
rev([], R, R).
rev([H|T], C, R) :- rev(T, [H|C], R).

callFunction(X,Y):- rev(Y,W),prefix([X],W).